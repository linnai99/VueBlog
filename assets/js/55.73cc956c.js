(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{522:function(s,t,e){"use strict";e.r(t);var a=e(2),n=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",[s._v("阐述数据库表之间的关系及实现：1:1、1:N、N:N关系")])]),s._v(" "),t("h1",{attrs:{id:"数据库表之间的关系及实现-1-1、1-n、n-n关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库表之间的关系及实现-1-1、1-n、n-n关系"}},[s._v("#")]),s._v(" 数据库表之间的关系及实现：1:1、1:N、N:N关系")]),s._v(" "),t("h2",{attrs:{id:"一对一关系的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一对一关系的实现"}},[s._v("#")]),s._v(" 一对一关系的实现：")]),s._v(" "),t("p",[s._v('（student表）使用引用表 （"address" 表）的外键（address_id）：')]),s._v(" "),t("p",[s._v("student: student_id主键, first_name, last_name, address_id外键\naddress: address_id主键, address, city, zipcode, student_id")]),s._v(" "),t("p",[s._v('"student" 表中的 "address_id"引用了 "address" 表的 "address_id" 列。这种外键关系确保了在 "student" 表中的每一行都引用了 "address" 表中存在的唯一地址。\n为了防止出现子表（"address" 表）中的多行与参考表（"student" 表）中的相同行相关联的情况，可以对外键列 "address.student_id" 应用唯一约束。这意味着 "address.student_id" 列中的值必须是唯一的，防止多个 "address" 行引用同一个 "student" 行。')]),s._v(" "),t("p",[s._v('在一个表中将关联的外键作为主键，从而使其成为唯一标识。例如，考虑一个 "Person" 表和一个 "Passport" 表，\n每个人只能拥有一个护照，可以在 "Person" 表中添加一个外键 "passport_id"，并将其作为主键，从而实现一对一关系。')]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CREATE TABLE Person (\n    person_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    passport_id INT UNIQUE,\n    FOREIGN KEY (passport_id) REFERENCES Passport(passport_id)\n);\n\nCREATE TABLE Passport (\n    passport_id INT PRIMARY KEY,\n    passport_number VARCHAR(20)\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"一对多关系的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一对多关系的实现"}},[s._v("#")]),s._v(" 一对多关系的实现：")]),s._v(" "),t("p",[s._v("一对多：在关系的多方使用外键链接回“一”方：")]),s._v(" "),t("p",[s._v("teachers: teacher_id主键, first_name, last_name # 一方\nclasses:  class_id, class_name, teacher_id外键  # 多方\n建立一个教师与多个班级之间的关系，一个教师可以拥有多个班级，但一个班级只属于一个教师。")]),s._v(" "),t("p",[s._v('在多的一方表中添加一个外键，指向一的一方表中的主键。例如，考虑一个 "Department" 表和一个 "Employee" 表，一个部门可以有多个员工，可以在 "Employee" 表中添加一个外键 "department_id"，指向 "Department" 表中的主键 "department_id"，从而实现一对多关系。')]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CREATE TABLE Department (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(50)\n);\n\nCREATE TABLE Employee (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(50),\n    department_id INT,\n    FOREIGN KEY (department_id) REFERENCES Department(department_id)\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"多对多关系的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多对多关系的实现"}},[s._v("#")]),s._v(" 多对多关系的实现：")]),s._v(" "),t("p",[s._v("多对多：使用联结表（示例）：")]),s._v(" "),t("p",[s._v("student: student_id, first_name, last_name\nclasses: class_id, name, teacher_id\nstudent_classes: class_id外键, student_id外键     # 联结表")]),s._v(" "),t("p",[s._v("在多对多关系中，两个实体之间存在多个对应关系。为了表示这些对应关系，需要创建一个中间表，即联结表。联结表包含两个外键列，分别链接到两个相关实体的主键列。这样，通过联结表，可以建立多对多关系的连接。")]),s._v(" "),t("p",[s._v('students"表 表示学生，"classes" 表表示班级，"student_classes" 表是一个联结表，用于存储学生和班级之间的关联关系。"student_classes" 表中的 "class_id" 列和 "student_id" 列都作为外键，分别指向 "classes" 表和 "students" 表的对应列。这样可以建立学生和班级之间的多对多关系，一个学生可以选择多个班级，一个班级也可以有多个学生。')]),s._v(" "),t("p",[s._v('使用一个中间表来存储关联关系，中间表包含两个外键，分别指向关联的两个表的主键。例如，考虑一个 "Student" 表和一个 "Course" 表，一个学生可以选择多门课程，一个课程也可以有多个学生，可以使用一个中间表 "Enrollment" 来存储学生和课程之间的关联关系。')]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CREATE TABLE Student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50)\n);\n\nCREATE TABLE Course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50)\n);\n\nCREATE TABLE Enrollment (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    FOREIGN KEY (student_id) REFERENCES Student(student_id),\n    FOREIGN KEY (course_id) REFERENCES Course(course_id)\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("h2",{attrs:{id:"主键-primary-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键-primary-key"}},[s._v("#")]),s._v(" 主键（Primary Key）")]),s._v(" "),t("p",[s._v("主键是用于唯一标识表中每一行数据的列或列组合。它确保表中的每一行都具有唯一的标识符，且主键的值不能为 NULL。")]),s._v(" "),t("h2",{attrs:{id:"外键-foreign-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外键-foreign-key"}},[s._v("#")]),s._v(" 外键（Foreign Key）")]),s._v(" "),t("p",[s._v("外键是用于建立表之间关联关系的列或列组合。它定义了一个表中的数据与另一个表中数据之间的引用关系，指向另一个表的主键或唯一键。")]),s._v(" "),t("h2",{attrs:{id:"主键和外键的不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键和外键的不同"}},[s._v("#")]),s._v(" 主键和外键的不同")]),s._v(" "),t("p",[s._v("主键是唯一的，每个表只能有一个主键。它的值在整个表中必须是唯一的，用于唯一标识每一行数据。\n外键可以重复，一个表可以有多个外键，每个外键可以指向另一个表中的相同值。")]),s._v(" "),t("p",[s._v("关系类型：\n主键用于在同一表中唯一标识每一行，用于实现表内的数据一致性。\n外键用于建立表之间的关联关系，实现不同表之间的数据关系，如一对一、一对多、多对多等。")]),s._v(" "),t("h2",{attrs:{id:"主键外键示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键外键示例"}},[s._v("#")]),s._v(" 主键外键示例：")]),s._v(" "),t("p",[s._v("假设我们有两个表：Customers（顾客）和 Orders（订单）。每个表都有一个主键和其他一些列。")]),s._v(" "),t("p",[s._v("Customers 表：")]),s._v(" "),t("p",[s._v("CustomerID主键\tCustomerName\tEmail\n1\t          Alice\t        alice@example.com\n2\t          Bob\t          bob@example.com\n3\t          Charlie\t      charlie@example.com\n在 Customers 表中，CustomerID 列被定义为主键。主键是一个唯一标识符，用于唯一地标识表中的每一行。在这个例子中，CustomerID 是 Customers 表的主键。")]),s._v(" "),t("p",[s._v("Orders 表：")]),s._v(" "),t("p",[s._v("OrderID主键\tOrderDate\tCustomerID外键\tProduct\tQuantity数量\n1\t      2023-01-01\t1\t        Product A\t  5\n2\t      2023-01-02\t2\t        Product B\t  3\n3\t      2023-01-03\t1\t        Product C\t  2\n4\t      2023-01-04\t3\t        Product D\t  1\n在 Orders 表中，OrderID 列被定义为主键。每个订单都有一个唯一的 OrderID。然而，Orders 表中的 CustomerID 列是一个外键。外键建立了 Orders 表和 Customers 表之间的关联关系。")]),s._v(" "),t("p",[s._v("在这个例子中，CustomerID 列是 Orders 表中的外键，它引用了 Customers 表中的 CustomerID 列。这意味着每个订单的 CustomerID 必须在 Customers 表的 CustomerID 列中存在，确保每个订单都与一个有效的顾客关联。")]),s._v(" "),t("p",[s._v("通过定义外键关系，我们可以轻松地查询特定顾客的订单，或者根据订单查找对应的顾客信息。外键确保了数据的引用完整性和一致性，防止无效的引用和不一致的数据。")])])}),[],!1,null,null,null);t.default=n.exports}}]);